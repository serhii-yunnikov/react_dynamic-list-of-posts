{"version":3,"sources":["types/Reset.ts","utils/fetchClient.ts","api/users.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/CommentsList.tsx","hooks/hooks.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","api/posts.ts","api/comments.ts","index.tsx"],"names":["Reset","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsersList","a","users","PostsList","posts","onHandleSidebarButton","selectedId","length","className","map","post","id","title","type","classNames","onClick","Loader","CommentsList","comments","onHandleDeleteComment","comment","href","email","name","useInput","initialValue","callback","useState","value","setValue","onChange","event","target","reset","NewCommentForm","onHandleFormSubmit","canselDangerInput","postId","isLoadingNewComment","isWarningUpdate","isDangerSubmit","isErrorName","isErrorEmail","isErrorComment","inputs","all","onSubmit","htmlFor","placeholder","PostDetails","postTitle","postBody","isWrongPostResponse","isPostLoading","isCommentForm","setIsCommentForm","UserSelector","onHandleUserSelect","onHandleSelectButton","isActiveList","userName","role","user","App","userId","setUserId","setUsername","setUsers","setPosts","setIsPostLoading","setIsWrongPostResponse","setIsActiveList","selectedPost","setSelectedPost","setComments","isWrongSidebarResponse","setIsWrongSidebarResponse","isCommentsLoading","setIsCommentsLoading","setIsloadingNewComment","setIsDangerSubmit","setIsWarningUpdate","useEffect","catch","error","window","alert","selectedUserId","selectedUserName","getPosts","finally","isCurrent","currentPost","current","preventDefault","postComment","newComment","currenList","commentId","prevComments","currentList","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3237f4f7.chunk.js","sourcesContent":["export enum Reset {\n  all = 'all',\n  comment = 'comment',\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","/* eslint-disable no-useless-catch */\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsersList = async () => {\n  try {\n    const users = await client.get<User[]>('/users');\n\n    return users || null;\n  } catch (error) {\n    throw error;\n  }\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post [] | null;\n  onHandleSidebarButton: (current: Post) => void,\n  selectedId: number | undefined,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onHandleSidebarButton,\n  selectedId,\n}) => {\n  return posts?.length ? (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedId !== post.id },\n                  )}\n                  onClick={() => onHandleSidebarButton(post)}\n                >\n                  {selectedId === post.id ? 'close' : 'open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ) : (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[] | null,\n  onHandleDeleteComment: (id: number) => void,\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments,\n  onHandleDeleteComment,\n}) => {\n  return comments?.length ? (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n      {comments?.map(comment => (\n        <article\n          className=\"message is-small\"\n          data-cy=\"Comment\"\n          key={comment.id}\n        >\n          <div className=\"message-header\">\n            <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n              {comment.name}\n            </a>\n            <button\n              data-cy=\"CommentDelete\"\n              type=\"button\"\n              className=\"delete is-small\"\n              aria-label=\"delete\"\n              onClick={() => onHandleDeleteComment(comment.id)}\n            >\n              delete button\n            </button>\n          </div>\n\n          <div className=\"message-body\" data-cy=\"CommentBody\">\n            {comment.body}\n          </div>\n        </article>\n      ))}\n    </>\n  ) : (\n    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n      No comments yet\n    </p>\n  );\n};\n","import { useState } from 'react';\n\nexport default function useInput(initialValue: string, callback: () => void) {\n  const [value, setValue] = useState(initialValue);\n\n  const onChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValue(event.target.value);\n    callback();\n  };\n\n  const reset = () => {\n    setValue('');\n  };\n\n  return {\n    value,\n    onChange,\n    reset,\n  };\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport useInput from '../hooks/hooks';\nimport { Reset } from '../types/Reset';\n\ntype Props = {\n  onHandleFormSubmit: (\n    event: React.FormEvent<HTMLFormElement>,\n    reset: (inputType: Reset) => void,\n    name: string,\n    email: string,\n    body: string,\n    postId?: number,\n  ) => void,\n  canselDangerInput: () => void,\n  postId?: number,\n  isLoadingNewComment: boolean,\n  isDangerSubmit: boolean,\n  isWarningUpdate: boolean,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  onHandleFormSubmit,\n  canselDangerInput,\n  postId,\n  isLoadingNewComment,\n  isWarningUpdate,\n  isDangerSubmit,\n}) => {\n  const name = useInput('', canselDangerInput);\n  const email = useInput('', canselDangerInput);\n  const comment = useInput('', canselDangerInput);\n  const isErrorName = isDangerSubmit && !name.value;\n  const isErrorEmail = isDangerSubmit && !email.value;\n  const isErrorComment = isDangerSubmit && !comment.value;\n\n  const reset = (inputs: Reset) => {\n    switch (inputs) {\n      case (Reset.all):\n        name.reset();\n        email.reset();\n        comment.reset();\n        break;\n      default:\n        comment.reset();\n        break;\n    }\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => onHandleFormSubmit(\n        event,\n        reset,\n        name.value,\n        email.value,\n        comment.value,\n        postId,\n      )}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isErrorName },\n            )}\n            {...name}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isErrorEmail },\n            )}\n            {...email}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isErrorComment },\n            )}\n            {...comment}\n          />\n        </div>\n\n        {isErrorComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoadingNewComment },\n            )}\n          >\n            Add\n          </button>\n          {isWarningUpdate && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Try again\n            </p>\n          )}\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => reset(Reset.all)}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { CommentsList } from './CommentsList';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Reset } from '../types/Reset';\n\ntype Props = {\n  comments: Comment[] | null,\n  postTitle?: string,\n  postBody?: string,\n  postId?: number,\n  isWrongPostResponse: boolean,\n  isPostLoading: boolean,\n  isCommentForm: boolean,\n  isLoadingNewComment: boolean,\n  isDangerSubmit: boolean,\n  isWarningUpdate: boolean,\n  setIsCommentForm: (value: boolean) => void,\n  onHandleFormSubmit: (\n    event: React.FormEvent<HTMLFormElement>,\n    reset: (inputType: Reset) => void,\n    name: string,\n    email: string,\n    body: string,\n    postId?: number,\n  ) => void,\n  canselDangerInput: () => void,\n  onHandleDeleteComment: (id: number) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  postTitle,\n  postBody,\n  isWrongPostResponse,\n  isPostLoading,\n  postId,\n  isCommentForm,\n  isLoadingNewComment,\n  isDangerSubmit,\n  isWarningUpdate,\n  onHandleFormSubmit,\n  setIsCommentForm,\n  canselDangerInput,\n  onHandleDeleteComment,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`${postId}: ${postTitle}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {postBody}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isPostLoading && <Loader />}\n\n          {isWrongPostResponse && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {!isPostLoading && !isWrongPostResponse && (\n            <>\n              <CommentsList\n                comments={comments}\n                onHandleDeleteComment={onHandleDeleteComment}\n              />\n              {!isCommentForm && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setIsCommentForm(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {isCommentForm && (\n          <NewCommentForm\n            isLoadingNewComment={isLoadingNewComment}\n            isDangerSubmit={isDangerSubmit}\n            isWarningUpdate={isWarningUpdate}\n            postId={postId}\n            onHandleFormSubmit={onHandleFormSubmit}\n            canselDangerInput={canselDangerInput}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null,\n  onHandleUserSelect(userId: number, userName: string): void,\n  onHandleSelectButton: () => void,\n  isActiveList: boolean,\n  userName: string,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onHandleUserSelect,\n  onHandleSelectButton,\n  isActiveList,\n  userName,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isActiveList },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => onHandleSelectButton()}\n        >\n          <span>{`${userName}`}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div className=\"dropdown-content\">\n          {users && (\n            users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className=\"dropdown-item\"\n                onClick={() => onHandleUserSelect(user.id, user.name)}\n              >\n                {user.name}\n              </a>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { Reset } from './types/Reset';\n\nimport { getUsersList } from './api/users';\nimport { getPosts } from './api/posts';\nimport { getComments, postComment, deleteComment } from './api/comments';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [userId, setUserId] = useState<number | null>(null);\n  const [userName, setUsername] = useState('Choose a user');\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [posts, setPosts] = useState<Post [] | null>(null);\n  const [isPostLoading, setIsPostLoading] = useState(false);\n  const [isWrongPostResponse, setIsWrongPostResponse] = useState(false);\n  const [isActiveList, setIsActiveList] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isWrongSidebarResponse, setIsWrongSidebarResponse] = useState(false);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isCommentForm, setIsCommentForm] = useState(false);\n  const [isLoadingNewComment, setIsloadingNewComment] = useState(false);\n  const [isDangerSubmit, setIsDangerSubmit] = useState(false);\n  const [isWarningUpdate, setIsWarningUpdate] = useState(false);\n\n  useEffect(() => {\n    getUsersList()\n      .then(response => setUsers(response))\n      .catch(error => window.alert(error));\n  }, []);\n\n  const handleSelectButton = () => {\n    setIsActiveList(isCurrent => !isCurrent);\n  };\n\n  const handleUserSelect = (\n    selectedUserId: number,\n    selectedUserName: string,\n  ) => {\n    setUserId(selectedUserId);\n    setUsername(selectedUserName);\n    setIsPostLoading(true);\n    setIsActiveList(false);\n\n    if (isWrongPostResponse) {\n      setIsWrongPostResponse(false);\n    }\n\n    getPosts(selectedUserId)\n      .then(response => setPosts(response))\n      .catch(() => setIsWrongPostResponse(true))\n      .finally(() => setIsPostLoading(false));\n  };\n\n  const handleSidebarButton = (currentPost: Post) => {\n    setSelectedPost(current => {\n      return current === currentPost ? null : currentPost;\n    });\n    setIsCommentsLoading(true);\n    setIsCommentForm(false);\n\n    getComments(currentPost.id)\n      .then(response => setComments(response))\n      .catch(() => setIsWrongSidebarResponse(true))\n      .finally(() => setIsCommentsLoading(false));\n  };\n\n  const handleSubmitCommentForm = (\n    event: React.FormEvent<HTMLFormElement>,\n    reset: (inputType: Reset) => void,\n    name: string,\n    email: string,\n    body: string,\n    postId?: number,\n  ) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      setIsDangerSubmit(true);\n\n      return;\n    }\n\n    setIsloadingNewComment(true);\n\n    const data = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    const updateComments = (newComment: Comment) => {\n      setComments(currenList => {\n        return currenList\n          ? [\n            ...currenList,\n            newComment,\n          ]\n          : [newComment];\n      });\n\n      setIsDangerSubmit(false);\n      reset(Reset.comment);\n    };\n\n    setIsWarningUpdate(false);\n\n    postComment(data)\n      .then((response) => updateComments(response))\n      .catch(() => setIsWarningUpdate(true))\n      .finally(() => setIsloadingNewComment(false));\n  };\n\n  const canselDangerInput = () => {\n    setIsDangerSubmit(false);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    const prevComments = comments;\n\n    setComments(currentList => {\n      if (currentList) {\n        const list = currentList?.filter(comment => comment.id !== commentId);\n\n        return list;\n      }\n\n      return currentList;\n    });\n\n    deleteComment(commentId)\n      .then()\n      .catch(() => setComments(prevComments));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  userName={userName}\n                  isActiveList={isActiveList}\n                  onHandleUserSelect={handleUserSelect}\n                  onHandleSelectButton={handleSelectButton}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!userId && (\n                  <p data-cy=\"Nopost\">\n                    No user selected\n                  </p>\n                )}\n\n                {isPostLoading && <Loader />}\n\n                {!isPostLoading\n                && userId\n                && !isWrongPostResponse\n                && (\n                  <PostsList\n                    posts={posts}\n                    onHandleSidebarButton={handleSidebarButton}\n                    selectedId={selectedPost?.id}\n                  />\n                )}\n\n                {isWrongPostResponse && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                comments={comments}\n                postTitle={selectedPost?.title}\n                postBody={selectedPost?.body}\n                postId={selectedPost?.id}\n                isWrongPostResponse={isWrongSidebarResponse}\n                isPostLoading={isCommentsLoading}\n                isCommentForm={isCommentForm}\n                isLoadingNewComment={isLoadingNewComment}\n                isDangerSubmit={isDangerSubmit}\n                isWarningUpdate={isWarningUpdate}\n                setIsCommentForm={setIsCommentForm}\n                onHandleFormSubmit={handleSubmitCommentForm}\n                canselDangerInput={canselDangerInput}\n                onHandleDeleteComment={handleDeleteComment}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number): Promise<Comment[]> => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const postComment = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}